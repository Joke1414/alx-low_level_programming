!<arch>
0-isupper.c/    0           0     0     644     244       `
#include "main.h"

/**
 * _isupper - Checks for uppercase characters.
 * @c: The character to be checked.
 *
 * Return: 1 if c is uppercase, 0 otherwise.
 */
int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (1);

	else
		return (0);
}
0-memset.c/     0           0     0     644     461       `
#include "main.h"

/**
 * *_memset - Fills the first N bytes of the memory
 *          of string S(pointer) with the constant byte of B
 * @s: A pointer to the memory area to be filled.
 * @b: The character to fill the memory area with.
 * @n: The number of bytes to be filled.
 *
 * Return: string @s, pointer to memory string s
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}

	return (s);
}

0-strcat.c/     0           0     0     644     575       `
#include "main.h"

/**
 *_strcat - Concatenates(put together) the string pointed to by @src,
 *          to the end of the string pointed to by @dest.+ terminating null byt
 *          at the end
 * @dest: pointer to the string to be concatenated upon.
 * @src: pointer to source string to be appended to @dest.
 *
 * Return: A pointer to the destination string @dest.
 */

char *_strcat(char *dest, char *src)
{
	int aray = 0, d_count = 0;

	while (dest[aray++])
	{
		d_count++;
	}

	for (aray = 0; src[aray]; aray++)
	{
		dest[d_count++] = src[aray];
	}

	return (dest);
}

1-isdigit.c/    0           0     0     644     228       `
#include "main.h"

/**
 * _isdigit - Checks for a digit 0 to 9
 * @c:  the digit to be checked is c
 *
 * Return: 1 if true, 0 otherwise.
 */
int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);
	else
		return (0);
}

1-memcpy.c/     0           0     0     644     460       `
#include "main.h"

/**
 * _memcpy - Copies @n bytes from the memory area pointed
 *           to by sting  @src into string @dest.
 * @dest: pointer to the string memory to copy to.
 * @src: pointer of string to  copy characters from.
 * @n: number of bytes memory to copy from @src.
 *
 * Return: returs @dest.
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}

	return (dest);
}
1-strncat.c/    0           0     0     644     561       `
#include "main.h"

/**
 * _strncat - Concatenates two strings using
 *            inputted number of bytes from src.
 * @dest: pointer to destination tobe appended upon.
 * @src: pointer to string to be appended to dest.
 * @n: The number of bytes from src to be appended to dest.
 *
 * Return: A pointer to the resulting string dest.
 */

char *_strncat(char *dest, char *src, int n)
{
	int aray = 0, d_count = 0;

	while (dest[aray++])
	{
		d_count++;
	}

	for (aray = 0; src[aray] && aray < n; aray++)
	{
		dest[d_count++] = src[aray];
	}

	return (dest);
}

100-atoi.c/     0           0     0     644     611       `
#include "main.h"

/**
 * _atoi - Converts a string to an integer.
 * @s: The string to be converted.
 *
 * Return: The integer value of the converted string.
 */

int _atoi(char *s)
{
	int i, d, n, len, f, digit;

	i = 0;
	d = 0;
	n = 0;
	len = 0;
	f = 0;
	digit = 0;

	while (s[len] != '\0')
		len++;

	while (i < len && f == 0)
	{
		if (s[i] == '-')
			++d;

		if (s[i] >= '0' && s[i] <= '9')
		{
			digit = s[i] - '0';
			if (d % 2)
				digit = -digit;
			n = n * 10 + digit;
			f = 1;
			if (s[i + 1] < '0' || s[i + 1] > '9')
				break;
			f = 0;
		}
		i++;
	}

	if (f == 0)
		return (0);

	return (n);
}


2-strchr.c/     0           0     0     644     388       `
#include "main.h"
#include <stdio.h>

/**
 * _strchr - Locates a character in a string.
 * @s: string to search
 * @c: character to locate
 *
 * Return: If c is found - a pointer to the first occurence.
 *         If c is not found - NULL.
 */

char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; s[i] >= '\0'; i++)
	{
		if (s[i] == c)
		{
			return (s + i);
		}
	}

	return (NULL);
}
2-strlen.c/     0           0     0     644     339       `
#include "main.h"

/**
 * _strlen - A functions that returns the length of a string.
 * @s: The string to get its length.
 *
 * Return: The length of @s
 */

int _strlen(char *s)
{
	int length = 0;

	while (s[length] != '\0')/*the array count != the last count of strings*/
	{
		length++;/*count length from zero*/
	}

	return (length);
}

2-strncpy.c/    0           0     0     644     536       `
#include "main.h"

/**
 * _strncpy - Copies a number of bytes from string src into dest
 * @dest: the string copy to copy to
 * @src: The source string.
 * @n: number of bytes to copied from src.
 *
 * Return: pointer to final result  string dest.
 */

char *_strncpy(char *dest, char *src, int n)
{
	int aray = 0, src_cnt = 0;

	while (src[aray++])
	{
		src_cnt++;
	}

	for (aray = 0; src[aray] && aray < n; aray++)
	{
		dest[aray] = src[aray];
	}

	for (aray = src_cnt; aray < n; aray++)
	{
		dest[aray] = '\0';
	}

	return (dest);
}
3-islower.c/    0           0     0     644     255       `
#include "main.h"

/**
 * _islower - Checks if a character is lowercase.
 * @c: The character to be checked.
 *
 * Return: 1 if character is lowercase, 0 otherwise.
 */
int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
		return (1);
	else
		return (0);
}


3-puts.c/       0           0     0     644     194       `
#include "main.h"

/**
 * _puts - prints a string
 * @str: The string
 */
void _puts(char *str)
{
	while (*str)
		_putchar(*str++);/*counts each allocated character memory*/

	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     407       `
#include "main.h"

/**
 * _strcmp - Compares 2 string ending at first different byte
 * @s1: pointer to first string.
 * @s2: pointer to second string.
 *
 * Return: If str1 < str2, the negative difference
 *         If str1 == str2, 0.
 *         If str1 > str2, the positive difference
 */

int _strcmp(char *s1, char *s2)
{
	while (*s1 && *s2 && *s1 == *s2)
	{
		s1++;
		s2++;
	}

	return (*s1 - *s2);
}

3-strspn.c/     0           0     0     644     571       `
#include "main.h"

/**
 * _strspn - Get the length of a prefix substring.
 * @s: string to be searched.
 * @accept: prefix to be measured.
 *
 * Return: The number of bytes in s inital segment,which
 *         consist only of bytes from accept.
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int i, n, bytes, count;

	bytes = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		count = 0;

		for (n = 0; accept[n] != '\0'; n++)
		{
			if (accept[n] == s[i])
			{
				bytes++;
				count = 1;
			}
		}
		if (count == 0)
		{
			return (bytes);
		}
	}

	return (bytes);
}

4-isalpha.c/    0           0     0     644     304       `
#include "main.h"

/**
 * _isalpha - Checks if a character is alphabetic.
 * @c: The character to be checked.
 *
 * Return: 1 if character is letter, lowercase or uppercase, 0 otherwise.
 */
int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
		return (1);
	else
		return (0);
}
4-strpbrk.c/    0           0     0     644     490       `
#include "main.h"
#include <stdio.h>

/**
 * _strpbrk - Searches a string for any of a set of bytes.
 * @s: string to searched
 * @accept: set of bytes to search for
 *
 * Return: If a set is matched - a pointer to the matched byte.
 *         If no set is matched - NULL.
 */

char *_strpbrk(char *s, char *accept)
{
	int i, n;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (n = 0; accept[n] != '\0'; n++)
		{
			if (s[i] == accept[n])
			{
				return (s + i);

			}
		}
	}

	return (NULL);
}
5-strstr.c/     0           0     0     644     600       `
#include <stdio.h>
#include "main.h"

/**
 * _strstr - Locates a substring.
 * @haystack: string to search
 * @needle: substring to locate
 *
 * Return: If the substring is located - a pointer to the beginning
 *                                       of the located substring.
 *         If the substring is not located - NULL.
 */

char *_strstr(char *haystack, char *needle)
{
	for (; *haystack != '\0'; haystack++)
	{
		char *one = haystack;
		char *two = needle;

		while (*one == *two && *two != '\0')
		{
			one++;
			two++;
		}

		if (*two == '\0')
			return (haystack);
	}

	return (NULL);
}
6-abs.c/        0           0     0     644     234       `
#include "main.h"

/**
 * _abs - Computes the absolute value of an integer.
 * @n: The integer to be computed.
 *
 * Return: The absolute value of the integer.
 */
int _abs(int n)
{
	if (n >= 0)
		return (n);
	else
		return (-n);
}


9-strcpy.c/     0           0     0     644     445       `
#include "main.h"

/**
 * _strcpy - Copies the string pointed to by @src, including the
 *           terminating null byte(\0) to the buffer pointed to by @dest.
 * @dest: pointer to the buffer to copy the string to.
 * @src: The string to copy
 *
 * Return: A pointer to the destination string @dest.
 */
char *_strcpy(char *dest, char *src)
{
	int i = 0;

	while (src[i])
	{
		dest[i] = src[i];
		i++;
	}
	dest[i] = '\0';

	return (dest);
}



_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

